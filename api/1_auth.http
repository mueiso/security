### 환경 변수
@host = http://localhost
@port = 8080
@baseUrl = {{host}}:{{port}}

### 1. 관리자 로그인 - JWT 토큰 발급
# 이 요청은 관리자 계정으로 로그인하여 JWT 토큰을 받습니다.
POST {{baseUrl}}/api/auth/login
Content-Type: application/json

{
  "username": "admin",
  "password": "admin"
}

> {%
    client.test("Status code is 200", function() {
        client.assert(response.status === 200, "응답 상태가 200이어야 합니다.");
    });
    client.test("Token exists", function() {
        client.assert(response.body.token !== undefined, "토큰이 응답에 포함되어야 합니다.");
    });
    client.global.set("adminToken", response.body.token);
%}

### 2. 일반 사용자 로그인 - JWT 토큰 발급
# 이 요청은 일반 사용자 계정으로 로그인하여 JWT 토큰을 받습니다.
POST {{baseUrl}}/api/auth/login
Content-Type: application/json

{
  "username": "user",
  "password": "user"
}

> {%
    client.test("Status code is 200", function() {
        client.assert(response.status === 200, "응답 상태가 200이어야 합니다.");
    });
    client.test("Token exists", function() {
        client.assert(response.body.token !== undefined, "토큰이 응답에 포함되어야 합니다.");
    });
    client.global.set("userToken", response.body.token);
%}

### 3. 잘못된 자격 증명으로 로그인 (실패 케이스)
# 이 요청은 잘못된 비밀번호로 로그인을 시도합니다. 401 상태 코드가 예상됩니다.
POST {{baseUrl}}/api/auth/login
Content-Type: application/json

{
  "username": "admin",
  "password": "wrongpassword"
}

> {%
    client.test("Status code is 401", function() {
        client.assert(response.status === 401, "잘못된 자격 증명으로 로그인 시 401 상태 코드가 반환되어야 합니다.");
    });
%}

### 4. 현재 사용자 정보 조회 (관리자 토큰 사용)
# 이 요청은 관리자 토큰을 사용하여 현재 인증된 사용자의 정보를 조회합니다.
GET {{baseUrl}}/api/me
Authorization: Bearer {{adminToken}}

> {%
    client.test("Status code is 200", function() {
        client.assert(response.status === 200, "응답 상태가 200이어야 합니다.");
    });
    client.test("Username is admin", function() {
        client.assert(response.body.username === "admin", "사용자명이 admin이어야 합니다.");
    });
%}

### 5. 인증 없이 보호된 리소스 접근 시도 (실패 케이스)
# 이 요청은 토큰 없이 보호된 리소스에 접근을 시도합니다. 401 상태 코드가 예상됩니다.
GET {{baseUrl}}/api/me

> {%
    client.test("Status code is 401", function() {
        client.assert(response.status === 401, "인증 없이 보호된 리소스 접근 시 401 상태 코드가 반환되어야 합니다.");
    });
%}
