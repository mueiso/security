### 환경 변수
@host = http://localhost
@port = 8080
@baseUrl = {{host}}:{{port}}

### 전체 시나리오 테스트
# 이 파일은 사용자 인증부터 관리자 기능 테스트까지 전체 흐름을 하나의 시나리오로 테스트합니다.
# 각 요청은 이전 요청의 결과를 기반으로 합니다.

### 1. 관리자로 로그인
POST {{baseUrl}}/api/auth/login
Content-Type: application/json

{
  "username": "admin",
  "password": "admin"
}

> {%
    client.test("관리자 로그인 성공", function() {
        client.assert(response.status === 200, "응답 상태가 200이어야 합니다.");
        client.assert(response.body.token !== undefined, "토큰이 응답에 포함되어야 합니다.");
    });
    client.global.set("token", response.body.token);
%}

### 2. 관리자 본인 정보 확인
GET {{baseUrl}}/api/me
Authorization: Bearer {{token}}

> {%
    client.test("관리자 정보 확인", function() {
        client.assert(response.status === 200, "응답 상태가 200이어야 합니다.");
        client.assert(response.body.username === "admin", "사용자명이 admin이어야 합니다.");
    });
%}

### 3. 모든 사용자 목록 조회 (관리자 권한)
GET {{baseUrl}}/api/users
Authorization: Bearer {{token}}

> {%
    client.test("사용자 목록 조회", function() {
        client.assert(response.status === 200, "응답 상태가 200이어야 합니다.");
        client.assert(Array.isArray(response.body), "응답이 배열이어야 합니다.");
        client.assert(response.body.length > 0, "사용자 목록이 비어있지 않아야 합니다.");
    });
%}

### 4. 관리자 대시보드 데이터 조회
GET {{baseUrl}}/api/admin/dashboard
Authorization: Bearer {{token}}

> {%
    client.test("관리자 대시보드 조회", function() {
        client.assert(response.status === 200, "응답 상태가 200이어야 합니다.");
        client.assert(response.body.totalUsers !== undefined, "총 사용자 수가 응답에 포함되어야 합니다.");
    });
%}

### 5. 토큰 제거 (로그아웃 시뮬레이션)
> {%
    client.global.set("adminToken", client.global.get("token"));
    client.global.clear("token");
    client.log("관리자 토큰이 저장되었고, 현재 토큰이 제거되었습니다. (로그아웃 시뮬레이션)");
%}

### 6. 일반 사용자로 로그인
POST {{baseUrl}}/api/auth/login
Content-Type: application/json

{
  "username": "user",
  "password": "user"
}

> {%
    client.test("일반 사용자 로그인 성공", function() {
        client.assert(response.status === 200, "응답 상태가 200이어야 합니다.");
        client.assert(response.body.token !== undefined, "토큰이 응답에 포함되어야 합니다.");
    });
    client.global.set("token", response.body.token);
%}

### 7. 일반 사용자 본인 정보 확인
GET {{baseUrl}}/api/me
Authorization: Bearer {{token}}

> {%
    client.test("일반 사용자 정보 확인", function() {
        client.assert(response.status === 200, "응답 상태가 200이어야 합니다.");
        client.assert(response.body.username === "user", "사용자명이 user여야 합니다.");
    });
%}

### 8. 일반 사용자로 다른 사용자 정보 조회
GET {{baseUrl}}/api/users/admin
Authorization: Bearer {{token}}

> {%
    client.test("다른 사용자 정보 조회", function() {
        client.assert(response.status === 200, "응답 상태가 200이어야 합니다.");
        client.assert(response.body.username === "admin", "조회된 사용자명이 admin이어야 합니다.");
    });
%}

### 9. 일반 사용자로 관리자 권한 API 접근 시도 (실패 케이스)
GET {{baseUrl}}/api/admin/dashboard
Authorization: Bearer {{token}}

> {%
    client.test("관리자 API 접근 실패", function() {
        client.assert(response.status === 403, "일반 사용자가 관리자 API 접근 시 403 상태 코드가 반환되어야 합니다.");
    });
%}

### 10. 일반 사용자로 사용자 목록 조회 시도 (관리자 권한 필요 - 실패 케이스)
GET {{baseUrl}}/api/users
Authorization: Bearer {{token}}

> {%
    client.test("사용자 목록 접근 실패", function() {
        client.assert(response.status === 403, "일반 사용자가 사용자 목록 접근 시 403 상태 코드가 반환되어야 합니다.");
    });
%}

### 11. 관리자 토큰 복원 (관리자로 다시 로그인)
> {%
    client.global.set("token", client.global.get("adminToken"));
    client.log("관리자 토큰이 복원되었습니다. (관리자로 다시 로그인)");
%}

### 12. 복원된 관리자 토큰으로 관리자 권한 API 접근
GET {{baseUrl}}/api/admin/dashboard
Authorization: Bearer {{token}}

> {%
    client.test("관리자 토큰 복원 후 접근 성공", function() {
        client.assert(response.status === 200, "응답 상태가 200이어야 합니다.");
        client.assert(response.body.totalUsers !== undefined, "총 사용자 수가 응답에 포함되어야 합니다.");
    });
%}

### 13. 만료되거나 잘못된 토큰으로 접근 시도 (실패 케이스)
GET {{baseUrl}}/api/me
Authorization: Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImF1dGgiOiJST0xFX0FETUlOIiwiZXhwIjoxNTcwMDAwMDAwfQ.invalid_signature

> {%
    client.test("잘못된 토큰 접근 실패", function() {
        client.assert(response.status === 401, "잘못된 토큰으로 접근 시 401 상태 코드가 반환되어야 합니다.");
    });
%}
